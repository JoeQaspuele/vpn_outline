import telebot
from telebot import types
from telegram.keyboards import main_menu, support_cancel_markup 
    BOT_API_TOKEN,
    DEFAULT_SERVER_ID,
    BLACKLISTED_CHAT_IDS,
    WHITELISTED_CHAT_IDS,
    ENABLE_BLACKLIST,
    ENABLE_WHITELIST
)
from telegram.messages import Messages, Errors, Buttons, Donation
import telegram.monitoring as monitoring
import outline.api as outline
from helpers.exceptions import KeyCreationError, KeyRenamingError, InvalidServerIdError
import telegram.message_formatter as f
from helpers.aliases import ServerId
import db

assert BOT_API_TOKEN is not None
bot = telebot.TeleBot(BOT_API_TOKEN, parse_mode='HTML')

waiting_for_support = False
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ (50 –ì–ë)
DEFAULT_DATA_LIMIT_GB = 50 # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ—Ñ–∏–∫–∞

# --- ACCESS CONTROL DECORATOR ---
def authorize(func):
    def wrapper(message):
        chat_id = message.chat.id
        if ENABLE_BLACKLIST and str(chat_id) in BLACKLISTED_CHAT_IDS:
            monitoring.report_blacklist_attempt(message.from_user.username, chat_id)
            return
        if ENABLE_WHITELIST and str(chat_id) not in WHITELISTED_CHAT_IDS:
            monitoring.report_not_in_whitelist(message.from_user.username, chat_id)
            return
        return func(message)
    return wrapper

# --- HANDLERS ---
@bot.message_handler(commands=['status'])
@authorize
def send_status(message):
    monitoring.send_api_status()

@bot.message_handler(commands=['start'])
@authorize
def send_welcome(message):
    bot.send_message(message.chat.id, Messages.WELCOME, reply_markup=main_menu())

@bot.message_handler(commands=['help'])
@authorize
def send_help(message):
    global waiting_for_support
    waiting_for_support = True
    bot.send_message(
        message.chat.id,
        Messages.HELP_PROMPT,
        reply_markup=support_cancel_markup()
    )

@bot.message_handler(commands=['servers'])
@authorize
def send_servers_list(message):
    bot.send_message(message.chat.id, f.make_servers_list())

@bot.message_handler(content_types=['text'])
@authorize
def answer(message):
    global waiting_for_support
    
    text = message.text.strip()
    
    # –†–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    if waiting_for_support:
        if text == Buttons.CANCEL:
            waiting_for_support = False
            bot.send_message(
                message.chat.id,
                Messages.REQUEST_CANCELED,
                reply_markup=main_menu()
            )
        else:
            send_to_support(message)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    command_handlers = {
        Buttons.GET_KEY: lambda: _make_new_key(
            message, 
            DEFAULT_SERVER_ID, 
            _form_key_name(message)
        ),
        Buttons.MY_KEY: lambda: _send_existing_key(message),
        Buttons.DOWNLOAD: lambda: bot.send_message(
            message.chat.id, 
            f.make_download_message(), 
            disable_web_page_preview=True
        ),
        Buttons.SUPPORT: send_help,
        Buttons.DONATE: send_support_message
    }
    
    if text.startswith("/newkey"):
        server_id, key_name = _parse_the_command(message)
        _make_new_key(message, server_id, key_name)
    elif text in command_handlers:
        command_handlers[text]()
    else:
        bot.send_message(
            message.chat.id,
            Errors.UNKNOWN_COMMAND,
            reply_markup=main_menu()
        )

# --- CORE FUNCTIONS ---

def _make_new_key(message, server_id: ServerId, key_name: str):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π VPN-–∫–ª—é—á –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞
    2. –ï—Å–ª–∏ –∫–ª—é—á –±—ã–ª —É–¥–∞–ª–µ–Ω - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π
    3. –ï—Å–ª–∏ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    4. –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        server_id: ID —Å–µ—Ä–≤–µ—Ä–∞ Outline
        key_name: –ò–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    """
    user_id = message.chat.id
    old_key_id = db.get_user_key(user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∫–ª—é—á
    if old_key_id:
        # –ï—Å–ª–∏ –∫–ª—é—á –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π
        if db.is_key_deleted(old_key_id):
            try:
                # –®–∞–≥ 1: –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                db.remove_user_key(user_id)
                
                # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á —Å –ª–∏–º–∏—Ç–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞
                key = outline.get_new_key(
                    key_name=key_name,
                    server_id=server_id,
                    data_limit_gb=DEFAULT_DATA_LIMIT_GB
                )
                
                # –®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
                db.save_user_key(user_id, key.kid)
                
                # –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                _send_key(message, key, server_id)
                
            except KeyCreationError:
                _send_error_message(message, Errors.API_CREATION_FAILED)
            except KeyRenamingError:
                _send_error_message(message, Errors.API_RENAMING_FAILED)
            except InvalidServerIdError:
                bot.send_message(message.chat.id, Errors.INVALID_SERVER_ID)
        
        # –ï—Å–ª–∏ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω
        else:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
                key = outline.get_key_by_id(old_key_id, server_id)
                bot.send_message(
                    message.chat.id,
                    Messages.key_info(key.access_url, is_new=False),
                    parse_mode="HTML"
                )
                
            except KeyError:
                # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–µ–Ω –≤—Ä—É—á–Ω—É—é –≤ Outline)
                key = outline.get_new_key(
                    key_name=key_name,
                    server_id=server_id,
                    data_limit_gb=DEFAULT_DATA_LIMIT_GB
                )
                db.save_user_key(user_id, key.kid)
                _send_key(message, key, server_id)
                
            except Exception as e:
                _send_error_message(message, Errors.UNEXPECTED_ERROR.format(error=str(e)))
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–ª—é—á–∞
    else:
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π –∫–ª—é—á
            key = outline.get_new_key(
                key_name=key_name,
                server_id=server_id,
                data_limit_gb=DEFAULT_DATA_LIMIT_GB
            )
            db.save_user_key(user_id, key.kid)
            _send_key(message, key, server_id)
            
        except KeyCreationError:
            _send_error_message(message, Errors.API_CREATION_FAILED)
        except KeyRenamingError:
            _send_error_message(message, Errors.API_RENAMING_FAILED)
        except InvalidServerIdError:
            bot.send_message(message.chat.id, Errors.INVALID_SERVER_ID)

def _send_existing_key(message):
    user_id = message.chat.id
    key_name = db.get_user_key(user_id)

    if not key_name:
        bot.send_message(user_id, "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–ª—é—á–∞.")
        return

    try:
        key = outline.get_key_by_id(key_name, DEFAULT_SERVER_ID)
        if key:
            access_url = key.access_url
            bot.send_message(user_id, f"–í–∞—à –∫–ª—é—á:\n<code>{access_url}</code>\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ Outline.")
        else:
            bot.send_message(user_id, "–í–∞—à –∫–ª—é—á –±—ã–ª —É–¥–∞–ª—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    except KeyError as e:  # –ª–æ–≤–∏–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
        db.mark_key_as_deleted(user_id)  # –ü–æ–º–µ—á–∞–µ–º –∫–ª—é—á –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω—ã–π
        bot.send_message(user_id, "–í–∞—à –∫–ª—é—á –±—ã–ª —É–¥–∞–ª—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    except Exception as e:
        _send_error_message(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–∞: {e}")


def _send_key(message, key, server_id):
    text = f.make_message_for_new_key("outline", key.access_url, server_id)
    bot.send_message(message.chat.id, text)
    monitoring.new_key_created(key.kid, key.name, message.chat.id, server_id)


def _send_error_message(message, error_message):
    bot.send_message(message.chat.id, error_message)
    monitoring.send_error(
        error_message,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )

def send_to_support(message):
    global waiting_for_support
    
    your_telegram_id = 245413138
    user_message = message.text.strip()
    
    username = message.from_user.username
    user_link = f'<a href="https://t.me/{username}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>' if username else f'<a href="tg://user?id={message.from_user.id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>'
    
    bot.send_message(
        your_telegram_id,
        f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {user_link}:\n\n{user_message}",
        parse_mode="HTML"
    )
    
    waiting_for_support = False
    bot.send_message(
        message.chat.id,
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
        reply_markup=main_menu()
    )

def send_support_message(message):
    bot.send_message(
        message.chat.id,
        Donation.MESSAGE,
        parse_mode="HTML"
    )


def _parse_the_command(message) -> list:
    parts = message.text.strip().split()
    server_id = parts[1] if len(parts) > 1 else DEFAULT_SERVER_ID
    key_name = ''.join(parts[2:]) if len(parts) > 2 else _form_key_name(message)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è server_id
    if not server_id.isdigit():
        raise InvalidServerIdError("Server ID must be numeric")

    return [server_id, key_name]


def _form_key_name(message) -> str:
    username = message.from_user.username or "no_username"
    return f"{message.chat.id}_{username}"


def start_telegram_server():
    db.init_db()
    monitoring.send_start_message()
    bot.infinity_polling()
